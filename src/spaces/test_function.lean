import spaces.times_cont_diff_map_support_in
import ..tsupport

open filter topological_space set
open_locale topological_space filter pointwise

section prelim

variables {Œ± : Type*} (S : set Œ±) [topological_space Œ±]

def cocompact_in : filter Œ± :=
‚®Ö (s : set S) (h : is_compact s), ùìü (coe '' s : set Œ±)·∂ú

lemma has_basis_cocompact_in : (cocompact_in S).has_basis (is_compact : set S ‚Üí Prop) 
  (compl ‚àò image coe) :=
has_basis_binfi_principal'
  (Œª s hs t ht, ‚ü®s ‚à™ t, hs.union ht, compl_subset_compl.2 
    (image_subset _ $ subset_union_left s t),
    compl_subset_compl.2 (image_subset _ $ subset_union_right s t)‚ü©)
  ‚ü®‚àÖ, is_compact_empty‚ü©

lemma cocompact_le_cocompact_in : cocompact Œ± ‚â§ cocompact_in S :=
Œª s hs, let ‚ü®t, ht, hts‚ü© := (has_basis_cocompact_in S).mem_iff.mp hs in 
  mem_cocompact.mpr ‚ü®coe '' t, ht.image continuous_subtype_coe, hts‚ü©

end prelim

private def test_function_submodule (ùïú E F : Type*) [nondiscrete_normed_field ùïú] 
  [normed_group E] [normed_group F] [normed_space ùïú E] [normed_space ùïú F] (Œ© : set E) 
  (n : with_top ‚Ñï) : submodule ùïú (E ‚Üí F) :=
{ carrier := {f | times_cont_diff ùïú n f ‚àß f =·∂†[cocompact_in Œ©] 0}, -- TODO !!!!!!
  zero_mem' := ‚ü®times_cont_diff_zero_fun, by refl‚ü©,
  add_mem' := Œª f g hf hg, ‚ü®hf.1.add hg.1, 
    by filter_upwards [hf.2, hg.2] using Œª x hfx hgx, 
      by rw [pi.add_apply, hfx, hgx, pi.zero_apply, add_zero]‚ü©,
  smul_mem' := Œª c f hf, ‚ü®times_cont_diff_const.smul hf.1, 
    by filter_upwards [hf.2] using Œª x hfx, 
      by rw [pi.smul_apply, hfx, pi.zero_apply, smul_zero]‚ü© }

def test_function (ùïú E F : Type*) [nondiscrete_normed_field ùïú] [normed_group E] 
  [normed_group F] [normed_space ùïú E] [normed_space ùïú F] (Œ© : set E) (n : with_top ‚Ñï) :=
‚Ü•(test_function_submodule ùïú E F Œ© n)

localized "notation `Cc^`n`‚üÆ`Œ©`,`E`,`F`;`ùïú`‚üØ` := test_function ùïú E F Œ© n" in 
  test_function

namespace test_function

section general

variables {ùïú E F : Type*} [nondiscrete_normed_field ùïú] [normed_group E] [normed_group F]
  [normed_space ùïú E] [normed_space ùïú F] {Œ© : set E} {n : with_top ‚Ñï} 
  {f g : Cc^n‚üÆŒ©, E, F; ùïú‚üØ} {x : E}

instance : add_comm_group (Cc^n‚üÆŒ©, E, F; ùïú‚üØ) := submodule.add_comm_group _
instance : module ùïú (Cc^n‚üÆŒ©, E, F; ùïú‚üØ) := submodule.module _

instance : has_coe_to_fun (Cc^n‚üÆŒ©, E, F; ùïú‚üØ) (Œª _, E ‚Üí F) := ‚ü®Œª f, f.1‚ü©

@[ext] lemma ext (H : ‚àÄx, f x = g x) : f = g :=
by {ext, exact H x}

lemma times_cont_diff (f : Cc^n‚üÆŒ©, E, F; ùïú‚üØ) :
  times_cont_diff ùïú n f :=
f.2.1

lemma eventually_eq_cocompact_in (f : Cc^n‚üÆŒ©, E, F; ùïú‚üØ) : 
  f =·∂†[cocompact_in Œ©] 0 :=
f.2.2

lemma eventually_eq_cocompact (f : Cc^n‚üÆŒ©, E, F; ùïú‚üØ) : 
  f =·∂†[cocompact E] 0 :=
cocompact_le_cocompact_in Œ© f.2.2

variables (ùïú) (F) (n)

def of_support_in (K : compacts Œ©)
  (f : times_cont_diff_map_supported_in ùïú E F (K.map coe continuous_subtype_coe) n) : 
Cc^n‚üÆŒ©, E, F; ùïú‚üØ :=
‚ü®f, f.times_cont_diff, (has_basis_cocompact_in Œ©).mem_iff.mpr ‚ü®K, K.2, f.supported_in‚ü©‚ü©

def of_support_in‚Çó (K : compacts Œ©) :
  times_cont_diff_map_supported_in ùïú E F (K.map coe continuous_subtype_coe) n 
    ‚Üí‚Çó[ùïú] Cc^n‚üÆŒ©, E, F; ùïú‚üØ :=
{ to_fun := of_support_in ùïú F n K,
  map_add' := sorry,
  map_smul' := sorry }

end general

section real

variables {E F : Type*} [normed_group E] [normed_group F]
  [normed_space ‚Ñù E] [normed_space ‚Ñù F] {n : with_top ‚Ñï} {Œ© : set E}
  {f g : Cc^n‚üÆŒ©, E, F; ‚Ñù‚üØ} {x : E}

private noncomputable def tmp_topology : topological_space (Cc^n‚üÆŒ©, E, F; ‚Ñù‚üØ) := 
  ‚®Ü (K : compacts Œ©), coinduced (of_support_in‚Çó ‚Ñù F n K) infer_instance

local notation `ùì£‚ÇÄ` := tmp_topology

protected def topology : topological_space (Cc^n‚üÆŒ©, E, F; ‚Ñù‚üØ) := 
Inf { t | ùì£‚ÇÄ ‚â§ t ‚àß @topological_add_group _ t _ ‚àß @has_continuous_smul ‚Ñù _ _ _ t ‚àß 
          @locally_convex_space ‚Ñù _ _ _ _ t }

local notation `ùì£` := test_function.topology

private lemma topology_le_iff {t : topological_space (Cc^n‚üÆŒ©, E, F; ‚Ñù‚üØ)} 
  (h‚ÇÅ : @topological_add_group _ t _) (h‚ÇÇ : @has_continuous_smul ‚Ñù _ _ _ t) 
  (h‚ÇÉ : @locally_convex_space ‚Ñù _ _ _ _ t) :
ùì£ ‚â§ t ‚Üî ùì£‚ÇÄ ‚â§ t :=
sorry -- consequence of general lemma

private def basis_zero : filter_basis Cc^n‚üÆŒ©, E, F; ‚Ñù‚üØ :=
{ sets := { s | s ‚àà (‚®Ü (K : compacts Œ©), (ùìù 0).map (of_support_in ‚Ñù F n K)) ‚àß 
                convex ‚Ñù s ‚àß absorbent ‚Ñù s ‚àß s = -s },
  nonempty := ‚ü®univ, univ_mem, convex_univ, absorbent_univ, neg_univ.symm‚ü©,
  inter_sets := Œª s t hs ht, ‚ü®s ‚à© t, ‚ü®inter_mem hs.1 ht.1, hs.2.1.inter ht.2.1, 
    sorry /- absorbent_inter doesn't exist -/, by rw [inter_neg, ‚Üê hs.2.2.2, ‚Üê ht.2.2.2]‚ü©, subset_refl _‚ü© }

private noncomputable def add_group_basis_zero : add_group_filter_basis Cc^n‚üÆŒ©, E, F; ‚Ñù‚üØ := 
{ zero' := sorry,
  add' := sorry,
  neg' := sorry,
  conj' := sorry,
  ..basis_zero }

private noncomputable def module_basis_zero : module_filter_basis ‚Ñù Cc^n‚üÆŒ©, E, F; ‚Ñù‚üØ :=
{ smul' := sorry,
  smul_left' := sorry,
  smul_right' := sorry,
  ..add_group_basis_zero }

private noncomputable def basis_topology : topological_space (Cc^n‚üÆŒ©, E, F; ‚Ñù‚üØ) := 
module_basis_zero.topology

local notation `ùì£‚ÇÅ` := basis_topology

private lemma topology_eq_basis_topology : (ùì£ : topological_space Cc^n‚üÆŒ©, E, F; ‚Ñù‚üØ) = ùì£‚ÇÅ :=
sorry

attribute [instance] test_function.topology

lemma continuous_iff_of_linear {G : Type*} [tG : topological_space G] [add_comm_group G] [module ‚Ñù G] 
  [topological_add_group G] [has_continuous_smul ‚Ñù G] [locally_convex_space ‚Ñù G] 
  (œÜ : Cc^n‚üÆŒ©, E, F; ‚Ñù‚üØ ‚Üí‚Çó[‚Ñù] G) : 
  continuous œÜ ‚Üî ‚àÄ (K : compacts Œ©), continuous (œÜ ‚àò‚Çó of_support_in‚Çó ‚Ñù F n K) :=
begin
  let tC : Œ† (K : compacts Œ©), topological_space 
    (times_cont_diff_map_supported_in ‚Ñù E F (K.map coe continuous_subtype_coe) n) :=
    infer_instance,
  calc  continuous œÜ 
      ‚Üî ùì£ ‚â§ tG.induced œÜ : continuous_iff_le_induced
  ... ‚Üî ùì£‚ÇÄ ‚â§ tG.induced œÜ : 
          topology_le_iff (topological_add_group_induced _) (has_continuous_smul_induced _) sorry
  ... ‚Üî ‚àÄ (K : compacts Œ©), coinduced (of_support_in‚Çó ‚Ñù F n K) infer_instance ‚â§ tG.induced œÜ : 
          supr_le_iff
  ... ‚Üî ‚àÄ (K : compacts Œ©), infer_instance ‚â§ (tG.induced œÜ).induced (of_support_in‚Çó ‚Ñù F n K) : 
          forall_congr (Œª K, coinduced_le_iff_le_induced)
  ... ‚Üî ‚àÄ (K : compacts Œ©), infer_instance ‚â§ tG.induced (œÜ ‚àò‚Çó of_support_in‚Çó ‚Ñù F n K) : 
          forall_congr (Œª K, by rw [linear_map.coe_comp, induced_compose])
  ... ‚Üî ‚àÄ (K : compacts Œ©), continuous (œÜ ‚àò‚Çó of_support_in‚Çó ‚Ñù F n K) : 
          forall_congr (Œª K, continuous_iff_le_induced.symm),
end

lemma continuous_iff_of_linear_of_normed_codomain {G : Type*} [normed_group G] 
  [normed_space ‚Ñù G] (T : Cc^n‚üÆŒ©, E, F; ‚Ñù‚üØ ‚Üí‚Çó[‚Ñù] G) : 
  continuous T ‚Üî ‚àÄ K : compacts Œ©, ‚àÉ (p : ‚Ñï), ‚àÉ C > 0, ‚àÄ f : Cc^n‚üÆŒ©, E, F; ‚Ñù‚üØ, 
    ‚à•T f‚à• ‚â§ C * (‚®Ü (i ‚â§ p) (hin : ‚Üëi ‚â§ n) (x : E), ‚à•iterated_fderiv ‚Ñù i f x‚à•) :=
begin
  rw [continuous_iff_of_linear, forall_congr],
  intros K,
  congr',
  rw [times_cont_diff_map_supported_in.continuous_iff_of_linear, exists_congr],
  intros p,
  rw [exists_congr],
  intros C,
  rw [exists_congr],
  intros hC,
  split; intros H f,
  { sorry },
  { exact H _ }
end
-- TODO : formulate this in term of bounded subsets

end real

end test_function
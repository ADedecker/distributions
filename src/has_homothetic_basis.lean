import topology.algebra.module.locally_convex

open filter
open_locale pointwise topological_space

def has_homothetic_basis {Œπ E : Sort*} [topological_space E] [has_scalar ‚Ñù E] (l : filter E) 
  (p : Œπ ‚Üí Prop) (s : Œπ ‚Üí set E) : Prop :=
has_basis l (Œª iŒµ : Œπ √ó ‚Ñù, p iŒµ.1 ‚àß 0 < iŒµ.2) (Œª iŒµ, iŒµ.2 ‚Ä¢ s iŒµ.1)

lemma ball_eq_smul_ball {E : Sort*} [semi_normed_group E] [normed_space ‚Ñù E] {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
  metric.ball (0 : E) Œµ = Œµ ‚Ä¢ metric.ball (0 : E) 1 :=
begin
  ext x,
  split;
  intros hx,
  { refine ‚ü®Œµ‚Åª¬π ‚Ä¢ x, _, _‚ü©,
    { rw mem_ball_zero_iff at *,
      rw norm_smul_of_nonneg (inv_nonneg.mpr hŒµ.le),
      rwa [‚Üê mul_lt_mul_left (inv_pos.mpr hŒµ), inv_mul_cancel hŒµ.ne.symm] at hx },
    { rw [smul_smul, mul_inv_cancel hŒµ.ne.symm, one_smul] } },
  { rcases hx with ‚ü®y, hy, rfl‚ü©,
    rw mem_ball_zero_iff at *,
    rw [norm_smul_of_nonneg hŒµ.le],
    rwa [‚Üê mul_lt_mul_left hŒµ, mul_one] at hy }
end

lemma normed_space.has_homothetic_basis_zero {Œπ E : Sort*} [semi_normed_group E] 
  [normed_space ‚Ñù E] :
  has_homothetic_basis (ùìù 0 : filter E) (Œª (i : unit), true) (Œª _, metric.ball (0 : E) 1) :=
metric.nhds_basis_ball.to_has_basis 
  (Œª Œµ hŒµ, ‚ü®‚ü®(), Œµ‚ü©, ‚ü®true.intro, hŒµ‚ü©, by simp [ball_eq_smul_ball hŒµ]‚ü©) 
  (Œª iŒµ hiŒµ, ‚ü®iŒµ.2, hiŒµ.2, by simp [ball_eq_smul_ball hiŒµ.2]‚ü©)

